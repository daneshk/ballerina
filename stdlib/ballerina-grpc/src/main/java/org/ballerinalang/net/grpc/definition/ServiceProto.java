// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto

package org.ballerinalang.net.grpc.definition;

import com.google.protobuf.DescriptorProtos;
import com.google.protobuf.Descriptors;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;

public final class ServiceProto {

    private  byte[] rootDescriptorData;
    private  List<byte[]> dependentDescriptorData;
    private  DescriptorProtos.FileDescriptorProto set;

    public ServiceProto(byte[] descriptorData, List<byte[]> depDescriptorData) {
        rootDescriptorData =descriptorData;
        dependentDescriptorData = depDescriptorData;
    }

    public  Descriptors.FileDescriptor getDescriptor() {

        Descriptors.FileDescriptor[] depSet = new Descriptors.FileDescriptor[dependentDescriptorData.size()];
        int i = 0;
        for (byte[] dis : dependentDescriptorData) {
            InputStream in = new ByteArrayInputStream(dis);
            try {
                DescriptorProtos.FileDescriptorSet desSet = DescriptorProtos.FileDescriptorSet.parseFrom(in);
                depSet[i] = Descriptors.FileDescriptor.buildFrom((DescriptorProtos.FileDescriptorProto)
                        desSet.getFileOrBuilder(0), new Descriptors.FileDescriptor[]{});
                // TODO: 2/20/18 for more levels
                i++;
            } catch (IOException | Descriptors.DescriptorValidationException e) {
                e.printStackTrace();
            }
        }

        InputStream targetStream = null;
        try {
            targetStream = new ByteArrayInputStream(rootDescriptorData);
            set= DescriptorProtos.FileDescriptorProto.parseFrom(targetStream);

//            return Descriptors.FileDescriptor.buildFrom((DescriptorProtos.FileDescriptorProto)
//                    set.getFileOrBuilder(0), Objects.requireNonNull(getFileDescriptors()));
            return Descriptors.FileDescriptor.buildFrom(set, depSet);
        } catch (IOException | Descriptors.DescriptorValidationException e) {
            throw new RuntimeException("Error : ", e);
        }
    }

    //    private static Descriptors.FileDescriptor[] getFileDescriptors() {
//    List<Descriptors.FileDescriptor> fileDescriptorList= new ArrayList<Descriptors.FileDescriptor>();
//        File folder = new File(DEPENDENCY_LOCATION);
//        ArrayList fileList= listFilesForFolder(folder);
//        for (Object file:fileList ) {
//            InputStream targetStream = null;
//            try {
//                targetStream = new FileInputStream((File) file);
//                set = DescriptorProtos.FileDescriptorSet.parseFrom(targetStream);
//                fileDescriptorList.add(Descriptors.FileDescriptor.buildFrom((DescriptorProtos.FileDescriptorProto)
//                        set.getFileOrBuilder(0), new Descriptors.FileDescriptor[]{}));
//                // TODO: 2/15/18 Maximum go upto this
//            } catch (IOException | Descriptors.DescriptorValidationException e) {
//                throw new RuntimeException("Error : ", e);
//            }
//        }
//        return (Descriptors.FileDescriptor[]) fileDescriptorList.toArray();
//    }
//    static ArrayList<File> listFilesForFolder(final File folder) {
//        return new ArrayList<>(Arrays.asList(Objects.requireNonNull(folder.listFiles())));
//    }
    public  DescriptorProtos.FileDescriptorProto getSet() {

        return set;
    }
}
